#+TITLE: Emacs Configuration
#+STARTUP: overview

* Add Org Repo and custom.el
#+BEGIN_SRC emacs-lisp
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

* THEME
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config (load-theme 'doom-molokai))

(setq evil-emacs-state-cursor  '("orange" box))
(setq evil-normal-state-cursor '("#b2e8c2" box))
(setq evil-visual-state-cursor '("violet" box))
(setq evil-insert-state-cursor '("#b2e8c2" bar))
(setq evil-motion-state-cursor '("gray" box))
#+END_SRC

* MISC INTERFACE TWEAKS
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (fset 'yes-or-no-p 'y-or-n-p)
  (setq compilation-ask-about-save nil)

  (global-hl-line-mode)
  (global-display-line-numbers-mode t)

  (windmove-default-keybindings) ; move windows around

  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (set-face-attribute 'default nil
                      :family "Iosevka"
                      :height 120
                      :weight 'normal
                      :width 'normal)


  (show-paren-mode 1)

  (defalias 'list-buffers 'ibuffer)
#+END_SRC

* WHITESPACE MANANGEMENT
#+BEGIN_SRC emacs-lisp
  (setq whitespace-style '(face trailing lines tabs)
        whitespace-line-column 80)
  (setq-default fill-column 80)
  (setq-default indent-tabs-mode nil)
  (global-whitespace-mode)
  (column-number-mode)

  (defun cleanup-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (set-buffer-file-coding-system 'utf-8)
    (indent-region (point-min) (point-max)))

  (global-set-key (kbd "C-c n") 'cleanup-buffer)
#+END_SRC

* BACKUP MANAGEMENT
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist
   '((".*" . "~/.saves"))
   auto-save-file-name-transforms
   '((".*" "~/.saves" t))
   delete-old-versions t
   kept-new-versions 5
   kept-old-versions 2
   version-control t)
#+END_SRC

* INDEPENDENT CUSTOM KEYBIND CONFIGS/CHANGES
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "ESC ESC ESC"))
  (global-auto-revert-mode t)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
* ESHELL
#+BEGIN_SRC emacs-lisp
  (defun eshell-clear-buffer ()
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

  (add-hook 'eshell-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-l") 'eshell-clear-buffer)))
#+END_SRC

* TRY
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* WHICH-KEY
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
	  which-key-idle-delay 0.5)
    :diminish 
    which-key-mode)
#+END_SRC

* GENERAL
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    (general-define-key
     :states '(normal)
     :prefix "SPC"
     "l" '(comint-clear-buffer :which-key "clear buffer")
     "g" '(:ignore t :which-key "Git")
     "gs" '(magit-status :which-key "git status")))
#+END_SRC

* ORG-BULLETS
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* ACE-WINDOW
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 2.0)))))))
#+END_SRC

* COUNSEL
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)
#+END_SRC

* IVY
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "")
  :init (ivy-mode 1)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+END_SRC

* SWIPER
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
     ("C-r" . swiper)
     ("C-c C-r" . ivy-resume)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

* AUTO-COMPLETE
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)))
#+END_SRC

* SMARTPARENS
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode 1)))
#+END_SRC

* RAINBOW DELIMITERS
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* AGGRESSIVE INDENT MODE
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC

* MAGIT
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-git-executable "/bin/git")
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))

    (global-set-key (kbd "C-x g") 'magit-status)
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))

#+END_SRC

* EVIL
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (evil-set-initial-state 'cider-repl-mode 'emacs)
    (evil-set-initial-state 'cider-stacktrace-mode 'emacs))
#+END_SRC

* PROJECTILE
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
    (projectile-global-mode))
#+END_SRC

* CLOJURE PACKAGES AND MISC
#+BEGIN_SRC emacs-lisp
  (setq nrepl-hide-special-buffers nil)
  (setq cider-prompt-for-symbol nil)
#+END_SRC

** CLOJURE-MODE
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (setq clojure-defun-style-default-indent nil)
    (setq cljr-inject-dependencies-at-jack-in nil)
    (add-hook 'clojure-mode-hook #'smartparens-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
    (add-hook 'clojure-mode-hook #'paredit-mode))
#+END_SRC

** CIDER
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :config
    (setq nrepl-log-messages t)
    (add-hook 'cider-mode-hook #'smartparens-mode)
    (setq cider-popup-stacktraces t)
    (setq cider-repl-popup-stacktraces t)
    (setq cider-show-error-buffer nil)
    (define-key cider-repl-mode-map (kbd "RET") #'paredit-newline)
    (define-key cider-repl-mode-map (kbd "C-M-j") #'cider-repl-return))

#+END_SRC
** PAREDIT
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (dolist (mode '(scheme emacs-lisp lisp clojure clojurescript cider-repl))
      (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
                'paredit-mode)))
#+END_SRC


* HTML
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.htm(l)?$" . web-mode)))
#+END_SRC
